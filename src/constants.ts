/** ----------------------------------------------------------------------------
 * Буквы алфавита
 * @type {Object}
 * @exports
 */
export const CHARS: { [x: string]: any } = new Proxy({
    CON:  'бвгджзйклмнпрстфхцчшщ',  // Согласные
    VOW:  'аеёиоуыэюя',             // Гласные
    // Буквы для специфичных окончаний
    ACON: 'гжкхчшщ',                // ГлинкИ
    BCON: 'бвдзлмнпрстфц',          // ЛиндЫ
    AVOW: 'аеёоуыэюя',              // О НиколаЕ, о ДмитриИ
    CCON: 'бвгдзклмнпрстфх',        // ДельвигОМ
    DCON: 'жйцчшщь',                // АбрамовичЕМ
}, {
    get(target, name) {
        return target[name].split('')
    }
})

/** ----------------------------------------------------------------------------
 * Окончания сокращенных отчеств
 * @type {Array}
 * @exports
 */
export const SHORT_MIDDLE_FLEX: string[] = CHARS.CON
    .filter(item => item !== 'в')
    .map(item => item + 'ич')

/** ----------------------------------------------------------------------------
 * Константы родов
 * @type {Number}
 * @exports
 */
export const M: number = 1 << 0 // Мужской
export const W: number = 1 << 1 // Женский

/** ----------------------------------------------------------------------------
 * Падежи
 * @type {Array}
 * @exports
 */
export const CASES: string[] = [
    'именительный', // Есть кто?
    'родительный',  // Нет кого?
    'дательный',    // Дать кому?
    'винительный',  // Винить кого?
    'творительный', // Доволен кем?
    'предложный',   // Думать о ком?
]

/** ----------------------------------------------------------------------------
 * Индексы частей имени
 * @type {Number}
 * @exports
 */
export enum NAME {
    FIRST = 0,
    MIDDLE,
    LAST,
}

/** ----------------------------------------------------------------------------
 * Склоняемые исключения женских имён с мягким знаком на конце
 * @type {Array}
 * @exports
 */
export const EXCEP: string[] = [
    'любовь',
    'адель',
    'жизель',
    'агарь',
    'рахиль',
    'руфь',
    'суламифь',
    'эсфирь',
    'юдифь',
    'сесиль',
    'нинель'
].map(item => item.substr(0, item.length - 1))
